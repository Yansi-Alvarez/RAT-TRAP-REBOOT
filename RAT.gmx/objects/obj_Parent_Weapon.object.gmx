<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>obj_Weapon_In_Use = noone;

laser_shoot = noone;

max_length = noone;

laser_width = noone;

lx = noone;

ly = noone;

length_x = noone;

length_y = noone;

beginning = noone;

sprite_index_Right_Weapon_In_Use_Equipped = noone;

sprite_index_Left_Weapon_In_Use_Equipped = noone;

sprite_index_Left_Weapon_In_Use_Pick_Up = noone;

sprite_index_Right_Weapon_In_Use_Pick_Up = noone;

sprite_index_Weapon_Hud = noone;

bullet_timer = true;

correction = noone;

correction_2 = noone;

ammo = noone;

ammo_reserve = noone;

ammo_capacity = noone;

ammo_reserve = noone;

weapon_type = noone;

weapon_flash = noone;

bullet = noone;

bullet_speed = noone;

casings = noone;

alarm_timer = noone;

cool_down = noone;

shooting_sound = noone;

ldx = noone;

ldy = noone;

weapon_charging_animation_left = noone;

weapon_charging_animation_right = noone;

charging_speed = noone;

charging_sound = noone;

index_size = noone;

screen_jiggle = noone;

//1 equals single fire (handgun, beretta, sniper)
//2 equals burst fire (AR15)
//3 equals pump action (Shotgun)
//4 laser weapon (laster)
//5 automatc (shotgun)

text_weapon = noone;
popup_width_weapon = noone;
popup_padding_weapon = noone;
draw_below_weapon = noone;
font_weapon = noone;
font_color_weapon = noone; 
bak_color_weapon = noone;

//////////////////////////////////////////////////////

weapon_collision = false;

weapon_picked_up = false;

equipped = false;

equip_text_box = false;

reloaded_ammo = noone;

aud = noone;

floating_number = 0;

flip_float = false;

firing = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>firing = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>length_y += 20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>length_x += 20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (flip_float == false) {

    floating_number += 1;
}

if (flip_float == true) {

    floating_number -= 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>screen_jiggle = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>other.object_bullet_3 = instance_create(x, y, bullet);
audio_play_sound(shooting_sound, 1, 0);
other.object_bullet_3.direction = point_direction(obj_Rat_Head.x, obj_Rat_Head.y, mouse_x, mouse_y);
other.object_bullet_3.speed = bullet_speed;
instance_create(x + ldx, y + ldy, weapon_flash);
instance_create(x, y, casings);
other.bullet_timer = false;
alarm[0] = cool_down;
ammo -= 1;

if (screen_jiggle == true) {

    global.screen_shake = 2;
    instance_create(obj_Rat_Head.x, obj_Rat_Head.y, obj_Screen_Shaker);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>other.object_bullet_2 = instance_create(x, y, bullet);
audio_play_sound(shooting_sound,1,0);
other.object_bullet_2.direction = point_direction(obj_Rat_Head.x, obj_Rat_Head.y, mouse_x, mouse_y);
instance_create(x + ldx, y + ldy, weapon_flash);
instance_create(x, y, casings);
other.object_bullet_2.speed = bullet_speed;
alarm[2] = alarm_timer;
ammo -= 1;

if (screen_jiggle == true) {

    global.screen_shake = 2;
    instance_create(obj_Rat_Head.x, obj_Rat_Head.y, obj_Screen_Shaker);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bullet_timer = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((global.weapon_attach_left_arm == true) and (global.weapon_attach_right_arm == false) and (weapon_picked_up == true)) {     

    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Left) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Right) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Left) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Right) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    }

//////////////////////////////////////////////////////////////////
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Left) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Right) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Left) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Right) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    }
    
//////////////////////////////////////////////////////////////////

    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Left) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Right) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Left) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Right) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    }
}

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

//Weapon Attachment Code for the right arm

if ((global.weapon_attach_right_arm == true) and (global.weapon_attach_left_arm == false) and (weapon_picked_up = true)) {
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Left) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Right) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Left) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Right) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    }

//////////////////////////////////////////////////////////////////
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Left) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Right) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Left) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Right) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    } 
    
//////////////////////////////////////////////////////////////////

    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Left) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Right) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Left) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Right) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    } 
}
/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

if (global.weapon_attach_left_arm == true) and (global.weapon_attach_right_arm == false) and (weapon_picked_up == true) and (equipped == true) {    

    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Left) {
    
        sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Right) {
    
        sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Left) {
    
        sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Right) {
    
        sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }

//////////////////////////////////////////////////////////////////
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Left) {
    
        sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Right) {
    
        sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Left) {
    
        sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Right) {
    
        sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
//////////////////////////////////////////////////////////////////

    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Left) {
    
        sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Right) {
    
        sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Left) {
    
        sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Right) {
    
        sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
}

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

//Weapon Attachment Code for the right arm

if (global.weapon_attach_right_arm == true) and (global.weapon_attach_left_arm == false) and (weapon_picked_up == true) {
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Left) {
    
        sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Right) {
    
        sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Left) {
    
        sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Right) {
    
        sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }

//////////////////////////////////////////////////////////////////
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Left) {
    
        sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Right) {
    
        sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Left) {
    
        sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Right) {
    
        sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    } 
    
//////////////////////////////////////////////////////////////////

    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Left) {
    
        sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Right) {
    
        sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Left) {
    
        sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Right) {
    
        sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

if  ((global.direction_player &gt;= 0) and (global.direction_player &lt;= 89)) and (obj_Rat_Head.walk_up_right == false) and (obj_Rat_Head.collision_with_enemy == false) {

    if (global.weapon_attach_left_arm == true) and (weapon_collision == true) and (global.weapon_attach_right_arm == false) {
        
        obj_Rat_Body.depth = 2;
    }
    
    if (weapon_collision == true) and (global.weapon_attach_right_arm == true) and (global.weapon_attach_left_arm == false) {
        
        obj_Rat_Body.depth = 0;
    }
}

if ((global.direction_player &gt;= 90) and (global.direction_player &lt;= 179)) and (obj_Rat_Head.walk_up_left == false) and (obj_Rat_Head.collision_with_enemy == false) {
    
    if (weapon_collision == true) and (global.weapon_attach_left_arm == true) and (global.weapon_attach_right_arm == false) {
        
        obj_Rat_Body.depth = 0;
    }
    
    if (weapon_collision == true) and (global.weapon_attach_right_arm == true) and (global.weapon_attach_left_arm == false) {
        
        //obj_Rat_Body.depth = 2;
        obj_Rat_Body.depth = 0;
    }
}

if ((global.direction_player &gt;= 180) and (global.direction_player &lt;= 269)) and (obj_Rat_Head.walk_down_left == false) and (obj_Rat_Head.collision_with_enemy == false) {
    
    if (weapon_collision == true) and (global.weapon_attach_left_arm == true) and (global.weapon_attach_right_arm == false) {
        
        obj_Rat_Body.depth = 0;
    }
    
    if (weapon_collision == true) and (global.weapon_attach_right_arm == true) and (global.weapon_attach_left_arm == false) {
        
        obj_Rat_Body.depth = 1;
    }
}

if ((global.direction_player &gt;= 270) and (global.direction_player &lt;= 359)) and (obj_Rat_Head.walk_down_right == false) and (obj_Rat_Head.collision_with_enemy == false) {
    
    if (weapon_collision == true) and (global.weapon_attach_left_arm == true) and (global.weapon_attach_right_arm == false) {
        
        obj_Rat_Body.depth = 1;
    }
    
    if (weapon_collision == true) and (global.weapon_attach_right_arm == true) and (global.weapon_attach_left_arm == false) {
        
        obj_Rat_Body.depth = 0;
    }
}

if ((sprite_index == sprite_index_Left_Weapon_In_Use_Pick_Up) or (sprite_index == sprite_index_Right_Weapon_In_Use_Pick_Up)) {

    if (flip_float == false) {
    
        y = y + floating_number;
        alarm[4] = 1;
        
        if (floating_number == 3) {

            flip_float = true;
        }
    }
    
    if (flip_float == true) {
        
        y = y - floating_number;
        alarm[4] = 1;
        
        if (floating_number == 0) {

            flip_float = false;
        }
    }
}

if (weapon_type == 1) {
//Potato Handgun, Beretta, Magnum, Sniper Rifle
    if (weapon_collision == true) and (ammo &gt;= 1) {
    
        if (mouse_check_button_pressed(mb_left) and (bullet_timer == true)) and ((global.weapon_attach_right_arm == true) or 
        (global.weapon_attach_left_arm == true)) {
                
            object_bullet = instance_create(x, y, bullet);
            audio_play_sound(shooting_sound, 1, 0);
            object_bullet.direction = point_direction(obj_Rat_Head.x, obj_Rat_Head.y, mouse_x, mouse_y);
            //instance_create(obj_Weapon_In_Use.x + 49, obj_Weapon_In_Use.y - 4, weapon_flash);
            instance_create((obj_Rat_Body.x - 10), obj_Rat_Body.y, obj_Sightline_Circle);
            object_bullet.speed = bullet_speed;
            bullet_timer = false;
            alarm[0] = cool_down;
            ammo -= 1;
            
            if (screen_jiggle == true) {
            
                global.screen_shake = 4;
                instance_create(obj_Rat_Head.x, obj_Rat_Head.y, obj_Screen_Shaker);
            }
        }
    }
}

//AR15
if (weapon_type == 2) {

    if (weapon_collision == true) and (ammo &gt;= 1) {
    
        if mouse_check_button_pressed(mb_left) and (bullet_timer == true) and ((global.weapon_attach_right_arm == true) or 
        (global.weapon_attach_left_arm == true)) {
            
            other.object_bullet = instance_create(x, y, bullet);
            audio_play_sound(shooting_sound, 1, 0);
            other.object_bullet.direction = point_direction(obj_Rat_Head.x, obj_Rat_Head.y, mouse_x, mouse_y);
            instance_create(x + ldx, y + ldy, weapon_flash);
            other.weapon_casings = instance_create(x, y, casings);
            other.weapon_casings.image_angle = random(360);
            other.object_bullet.speed = bullet_speed;
            alarm[1] = alarm_timer;
            alarm[2] = alarm_timer;
            ammo -= 1;
            
            if (screen_jiggle == true) {
            
                global.screen_shake = 2;
                instance_create(obj_Rat_Head.x, obj_Rat_Head.y, obj_Screen_Shaker);
            }
        }
    }
}

//Shotgun
if (weapon_type == 3) {

    if (weapon_collision == true) and (ammo &gt;= 1) {
    
        if mouse_check_button_pressed(mb_left) and (bullet_timer == true) and ((global.weapon_attach_right_arm == true) or 
        (global.weapon_attach_left_arm == true)) {
            
            audio_play_sound(snd_Shotgun,1,0);      
        
            //bullet spray
            repeat (15){
         
                other.object_bullet = instance_create(x, y, bullet);
                //other.object_bullet.direction = irandom(50) + point_direction(obj_Rat_Head.x, obj_Rat_Head.y, mouse_x, mouse_y);
                //other.object_bullet.image_angle = (irandom(50) + obj_Weapon_In_Use.image_angle)
                other.object_bullet.speed = bullet_speed;
            }
            
            other.weapon_casings = instance_create(x, y, casings);
            other.weapon_casings.image_angle = random(360);
            alarm[0] = cool_down;
            ammo -= 1;
            
            //instance_create(x + ldx, y + ldy, obj_Muzzle_Flash);
            bullet_timer = false
            alarm[0] = 40
            
            if (screen_jiggle == true) {
            
                global.screen_shake = 6;
                instance_create(obj_Rat_Head.x, obj_Rat_Head.y, obj_Screen_Shaker);
            }
        } 
    }
}

//Laser rifle

if (weapon_type == 4) {

    if (weapon_collision == true) and (ammo &gt;= 1) {
    
        if mouse_check_button_pressed(mb_left) and (bullet_timer == true) and ((global.weapon_attach_right_arm == true) or 
        (global.weapon_attach_left_arm == true)) {
        
            //sprite_index = weapon_charging_animation_left;
            //audio_play_sound(charging_sound, 1, 1);
            //image_speed = charging_speed;
            
            //if (mouse_check_button_released(mb_left)) and ((other.sprite_index == weapon_fully_charged_animation_left) or (other.sprite_index == weapon_fully_charged_animation_left)){
                
                //other.object_bullet = instance_create(x, y, bullet);
                audio_play_sound(shooting_sound, 1, 0);
                //other.object_bullet.direction = point_direction(obj_Rat_Head.x, obj_Rat_Head.y, mouse_x, mouse_y);
                //other.object_bullet.speed = bullet_speed;
                //scr_find_distance_to_object(x, y, point_direction(obj_Rat_Head.x, obj_Rat_Head.y, mouse_x, mouse_y), object, point_distance(obj_Parent_Weapon.x, obj_Parent_Weapon.y, mouse_x, mouse_y));
                //other.bullet_timer = false;
                //find_distance_to_object(x, y, angle, object, maxdist);
                //distance = scr_find_distance_to_object(obj_Weapon_In_Use.x, obj_Weapon_In_Use.y, obj_Weapon_In_Use.image_angle, obj_Parent_Wall, 200);
                //object_bullet.sprite_width = distance;
                //scr_Laser(circle_radius, circle_outline, laser_direction, max_length, object_collision, weapon_using, color1, color2);
                //scr_Laser( 50, 20, obj_Rat_Body.weapon_equipped.image_angle, 400, obj_Parent_Wall, obj_Weapon_In_Use, c_aqua, c_red );
                laser_shoot = true;
                
                alarm[0] = cool_down;
                ammo -= 1;
            //}
            /*
            if (mouse_check_button_released(mb_left) and (sprite_index == weapon_charging_animation_left)) {
                
                other.potato_weapon_bullet_timer = false;
                sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
            }
            
            if (mouse_check_button_released(mb_left) and (sprite_index == weapon_charging_animation_right)) {
                
                other.potato_weapon_bullet_timer = false;
                sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
            }*/
        } 
    }
}

//P90
if (weapon_type = 5) and (ammo &gt;= 1) {

    if (weapon_collision == true) {
    
        if (mouse_check_button(mb_left) and (bullet_timer == true)) and ((global.weapon_attach_right_arm == true) or 
        (global.weapon_attach_left_arm == true)) {
            
            if (firing) {
                
                object_bullet = instance_create(x, y, bullet);
                firing = false;
                alarm[7] = 1;
            }
            
            audio_play_sound(shooting_sound, 1, 0);
            object_bullet.direction = point_direction(obj_Rat_Head.x, obj_Rat_Head.y, mouse_x, mouse_y);
            other.weapon_casings = instance_create(x, y, casings);
            other.weapon_casings.image_angle = random(360);
            instance_create(x + ldx, y + ldy, weapon_flash);
            object_bullet.speed = bullet_speed;
            ammo -= 1;
            
            if (mouse_check_button_released(mb_left)) {
            
                bullet_timer = false;
                alarm[0] = 1;
            }
            
            if (screen_jiggle == true) {
            
                global.screen_shake = 2;
                instance_create(obj_Rat_Head.x, obj_Rat_Head.y, obj_Screen_Shaker);
                alarm[3] = 2;
                screen_jiggle = false;
            }
        }
    }
}
if (weapon_type == 1) or (weapon_type == 2) or (weapon_type == 3) or (weapon_type == 4) or (weapon_type == 5) {
    
    if (ammo &gt;= 1) {
        
        aud = false;
    }
    
    else if (ammo == 0) {
        
        aud = true;
    }
    
    else if (ammo &lt;= 0) and (mouse_check_button_pressed(mb_left) and (aud == true)) {
        
        audio_play_sound(snd_No_Ammo, 1, 0);
    }
    
    if (keyboard_check_pressed(ord('R'))) and (ammo &lt; ammo_capacity) and (ammo_reserve &gt;= 1) {
        
        audio_play_sound(snd_Pickup, 1, 0);
    
        if (ammo_reserve &gt; ammo) {
            
            reloaded_ammo = ammo_capacity - ammo;
            ammo_reserve = ammo_reserve - reloaded_ammo;
        }
        
        else if (ammo_reserve &lt; ammo_capacity) and (ammo_reserve &lt; ammo) {
        
            reloaded_ammo = ammo_reserve;
            ammo_reserve = 0;
        }
        
        ammo = reloaded_ammo + ammo;
    }
}

if (weapon_picked_up == true) {

    //Angle of head when looking up right
    
    if (global.direction_player &gt;= 0) and (global.direction_player &lt;= 30) {
    
        obj_Rat_Body.weapon_equipped.image_angle = global.direction_player;
    }
    
    if (global.direction_player &gt;= 31) and (global.direction_player &lt;= 89) {
        
        obj_Rat_Body.weapon_equipped.image_angle = 31;
    }
    
    //Angle of head when looking up left
    
    if (global.direction_player &gt;= 90) and (global.direction_player &lt;= 130) {
    
        obj_Rat_Body.weapon_equipped.image_angle = 131 - correction;
    }
    
    if (global.direction_player &gt;= 131) and (global.direction_player &lt;= 179) {
    
        obj_Rat_Body.weapon_equipped.image_angle = global.direction_player - correction;
    }
    
    //Angle of head when looking down left
    
    if (global.direction_player &gt;= 180) and (global.direction_player &lt;= 220) {
    
        obj_Rat_Body.weapon_equipped.image_angle = global.direction_player + correction_2;
    }
    
    if (global.direction_player &gt;= 221) and (global.direction_player &lt;= 269) {
    
        obj_Rat_Body.weapon_equipped.image_angle = 221 + correction_2;
    }
    
    //Angle of head when looking down right
    
    if (global.direction_player &gt;= 270) and (global.direction_player &lt;= 310) {
    
        obj_Rat_Body.weapon_equipped.image_angle = 310;
    }
    
    if (global.direction_player &gt;= 311) and (global.direction_player &lt;= 359) {
    
        obj_Rat_Body.weapon_equipped.image_angle = global.direction_player;
    }
}

////////////////////////////////////////////////////////////////////Weilding weapons////////////////////////////////////////////////////////////////////

if ((equip_text_box == true) and ((sprite_index = sprite_index_Left_Weapon_In_Use_Pick_Up) or (sprite_index = sprite_index_Right_Weapon_In_Use_Pick_Up)) 
and ((global.weapon_attach_right_arm = false) and (global.weapon_attach_left_arm = false)) and (keyboard_check_pressed(ord('E')))) {
    
    if (//Walking Animation
        ((obj_Rat_Body.sprite_index = spr_Body_Standard_Walking_Down_Left) or (obj_Rat_Body.sprite_index = spr_Body_Standard_Stun_Down_Left) or 
        (obj_Rat_Body.sprite_index = spr_Body_Standard_Idle_Down_Left))) {
        
        equip_text_box = false;
        
        obj_Rat_Body.weapon_equipped = obj_Weapon_In_Use;
        //Input new code for laser rifle so it uses the charge animation for the rest of it here
        
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.weapon_picked_up = true;
        obj_Rat_Body.weapon_equipped.weapon_collision = true;
        obj_Rat_Body.weapon_equipped.equipped = true;
        global.weapon_attach_left_arm = true;
        obj_Rat_Body.weapon_equipped.persistent = true;
    }
    
    if (//Walking Animation
        ((obj_Rat_Body.sprite_index = spr_Body_Standard_Walking_Down_Right) or (obj_Rat_Body.sprite_index = spr_Body_Standard_Stun_Down_Right) or 
        (obj_Rat_Body.sprite_index = spr_Body_Standard_Idle_Down_Right))) {       

        equip_text_box = false;
        
        obj_Rat_Body.weapon_equipped = obj_Weapon_In_Use;
        
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.weapon_picked_up = true;
        obj_Rat_Body.weapon_equipped.weapon_collision = true;
        obj_Rat_Body.weapon_equipped.equipped = true;
        global.weapon_attach_right_arm = true;
        obj_Rat_Body.weapon_equipped.persistent = true;
    }
    
    if (//Walking Animation
        ((obj_Rat_Body.sprite_index = spr_Body_Standard_Walking_Up_Left) or (obj_Rat_Body.sprite_index = spr_Body_Standard_Stun_Up_Left) or 
        (obj_Rat_Body.sprite_index = spr_Body_Standard_Idle_Up_Left))) {
        
        equip_text_box = false;
        
        obj_Rat_Body.weapon_equipped = obj_Weapon_In_Use;
        
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.weapon_picked_up = true;
        obj_Rat_Body.weapon_equipped.weapon_collision = true;
        obj_Rat_Body.weapon_equipped.equipped = true;
        global.weapon_attach_left_arm = true;
        obj_Rat_Body.weapon_equipped.persistent = true;
    }
    
    if (//Walking Animation
        ((obj_Rat_Body.sprite_index = spr_Body_Standard_Walking_Up_Right) or (obj_Rat_Body.sprite_index = spr_Body_Standard_Stun_Up_Right) or 
        (obj_Rat_Body.sprite_index = spr_Body_Standard_Idle_Up_Right))) {
        
        equip_text_box = false;
        
        obj_Rat_Body.weapon_equipped = obj_Weapon_In_Use;
        
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.weapon_picked_up = true;
        obj_Rat_Body.weapon_equipped.weapon_collision = true;
        obj_Rat_Body.weapon_equipped.equipped = true;
        global.weapon_attach_right_arm = true;
        obj_Rat_Body.weapon_equipped.persistent = true;
    }
    
    floating = false;
}

////////////////////////////////////////////////////////////////////Weilding weapons////////////////////////////////////////////////////////////////////
if ((equip_text_box == true) and ((sprite_index = sprite_index_Left_Weapon_In_Use_Pick_Up) or (sprite_index = sprite_index_Right_Weapon_In_Use_Pick_Up)) 
and ((global.weapon_attach_right_arm = true) or (global.weapon_attach_left_arm = true)) and (keyboard_check_pressed(ord('E')))) {
    
    if (//Walking Animation
        ((obj_Rat_Body.sprite_index = spr_Body_Standard_Walking_Down_Left) or (obj_Rat_Body.sprite_index = spr_Body_Standard_Stun_Down_Left) or 
        (obj_Rat_Body.sprite_index = spr_Body_Standard_Idle_Down_Left))) {
        
        equip_text_box = false;
        
        obj_Rat_Body.weapon_dropped = obj_Rat_Body.weapon_equipped;
        obj_Rat_Body.weapon_dropped.sprite_index = obj_Rat_Body.weapon_dropped.sprite_index_Left_Weapon_In_Use_Pick_Up;
        obj_Rat_Body.weapon_dropped.weapon_picked_up = false;
        obj_Rat_Body.weapon_dropped.weapon_collision = false;
        obj_Rat_Body.weapon_dropped.equipped = false;
        obj_Rat_Body.weapon_dropped.x = obj_Weapon_In_Use.x;
        obj_Rat_Body.weapon_dropped.y = obj_Weapon_In_Use.y;
        obj_Rat_Body.weapon_dropped.persistent = false;
        
        obj_Rat_Body.weapon_equipped = obj_Weapon_In_Use;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.weapon_picked_up = true;
        obj_Rat_Body.weapon_equipped.weapon_collision = true;
        obj_Rat_Body.weapon_equipped.equipped = true;
        global.weapon_attach_right_arm = false;
        global.weapon_attach_left_arm = true;
        obj_Rat_Body.weapon_equipped.persistent = true;
    }
    
    if (//Walking Animation
        ((obj_Rat_Body.sprite_index = spr_Body_Standard_Walking_Down_Right) or (obj_Rat_Body.sprite_index = spr_Body_Standard_Stun_Down_Right) or 
        (obj_Rat_Body.sprite_index = spr_Body_Standard_Idle_Down_Right))) {
        
        equip_text_box = false;
        
        obj_Rat_Body.weapon_dropped = obj_Rat_Body.weapon_equipped;
        obj_Rat_Body.weapon_dropped.sprite_index = obj_Rat_Body.weapon_dropped.sprite_index_Right_Weapon_In_Use_Pick_Up;
        obj_Rat_Body.weapon_dropped.weapon_picked_up = false;
        obj_Rat_Body.weapon_dropped.weapon_collision = false;
        obj_Rat_Body.weapon_dropped.equipped = false;
        obj_Rat_Body.weapon_dropped.x = obj_Weapon_In_Use.x;
        obj_Rat_Body.weapon_dropped.y = obj_Weapon_In_Use.y;
        obj_Rat_Body.weapon_dropped.persistent = false;
        
        obj_Rat_Body.weapon_equipped = obj_Weapon_In_Use;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.weapon_picked_up = true;
        obj_Rat_Body.weapon_equipped.weapon_collision = true;
        obj_Rat_Body.weapon_equipped.equipped = true;
        global.weapon_attach_right_arm = true;
        global.weapon_attach_left_arm = false;
        obj_Rat_Body.weapon_equipped.persistent = true;
    }
    
    if (//Walking Animation
        ((obj_Rat_Body.sprite_index = spr_Body_Standard_Walking_Up_Left) or (obj_Rat_Body.sprite_index = spr_Body_Standard_Stun_Up_Left) or 
        (obj_Rat_Body.sprite_index = spr_Body_Standard_Idle_Up_Left))) {
        
        equip_text_box = false;
        
        obj_Rat_Body.weapon_dropped = obj_Rat_Body.weapon_equipped;
        obj_Rat_Body.weapon_dropped.sprite_index = obj_Rat_Body.weapon_dropped.sprite_index_Left_Weapon_In_Use_Pick_Up;
        obj_Rat_Body.weapon_dropped.weapon_picked_up = false;
        obj_Rat_Body.weapon_dropped.weapon_collision = false;
        obj_Rat_Body.weapon_dropped.equipped = false;
        obj_Rat_Body.weapon_dropped.x = obj_Weapon_In_Use.x;
        obj_Rat_Body.weapon_dropped.y = obj_Weapon_In_Use.y;
        obj_Rat_Body.weapon_dropped.persistent = false;
        
        obj_Rat_Body.weapon_equipped = obj_Weapon_In_Use;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.weapon_picked_up = true;
        obj_Rat_Body.weapon_equipped.weapon_collision = true;
        obj_Rat_Body.weapon_equipped.equipped = true;
        global.weapon_attach_right_arm = false;
        global.weapon_attach_left_arm = true;
        obj_Rat_Body.weapon_equipped.persistent = true;
    }
    
    if (//Walking Animation
        ((obj_Rat_Body.sprite_index = spr_Body_Standard_Walking_Up_Right) or (obj_Rat_Body.sprite_index = spr_Body_Standard_Stun_Up_Right) or 
        (obj_Rat_Body.sprite_index = spr_Body_Standard_Idle_Up_Right))) {
        
        equip_text_box = false;
        
        obj_Rat_Body.weapon_dropped = obj_Rat_Body.weapon_equipped;
        obj_Rat_Body.weapon_dropped.sprite_index = obj_Rat_Body.weapon_dropped.sprite_index_Right_Weapon_In_Use_Pick_Up;
        obj_Rat_Body.weapon_dropped.weapon_picked_up = false;
        obj_Rat_Body.weapon_dropped.weapon_collision = false;
        obj_Rat_Body.weapon_dropped.equipped = false;
        obj_Rat_Body.weapon_dropped.x = obj_Weapon_In_Use.x;
        obj_Rat_Body.weapon_dropped.y = obj_Weapon_In_Use.y;
        obj_Rat_Body.weapon_dropped.persistent = false;
        
        obj_Rat_Body.weapon_equipped = obj_Weapon_In_Use;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Weapon_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.weapon_picked_up = true;
        obj_Rat_Body.weapon_equipped.weapon_collision = true;
        obj_Rat_Body.weapon_equipped.equipped = true;
        global.weapon_attach_right_arm = true;
        global.weapon_attach_left_arm = false;
        obj_Rat_Body.weapon_equipped.persistent = true;
    }
    
    floating = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if ( sprite_index == gun_charging_animation_left ) {
    
    sprite_index = gun_fully_charged_animation_left;
}

if ( sprite_index == gun_charging_animation_right ) {
    
    sprite_index = gun_fully_charged_animation_right;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw Event for obj_Parent_Weapon

draw_self();

if ((laser_shoot) and (weapon_type == 4)) {

    //draw_circle_colour(obj_Weapon_In_Use.x, obj_Weapon_In_Use.y, 20, c_white, c_red, 1);
    var lx = obj_Weapon_In_Use.x + lengthdir_x(max_length, point_direction(obj_Rat_Head.x, obj_Rat_Head.y, mouse_x, mouse_y));
    var ly = obj_Weapon_In_Use.y + lengthdir_y(max_length, point_direction(obj_Rat_Head.x, obj_Rat_Head.y, mouse_x, mouse_y));
    
    if (laser_shoot) {
    
        if (length_x &lt;= lx) and (!collision_line(obj_Weapon_In_Use.x, obj_Weapon_In_Use.y, length_x, length_y, obj_Parent_Wall, false, true)){
        
            alarm[5] = 1;
        }
        
        if (length_y &lt;= ly) and (!collision_line(obj_Weapon_In_Use.x, obj_Weapon_In_Use.y, length_x, length_y, obj_Parent_Wall, false, true)) {
        
            alarm[6] = 1;
        }
    }
        
    draw_line_width_colour(obj_Weapon_In_Use.x, obj_Weapon_In_Use.y, length_x, length_y, laser_width, c_red, c_red);
    
    if ((length_x &gt;= lx) or (length_y &gt;= ly)) or (collision_line(obj_Weapon_In_Use.x, obj_Weapon_In_Use.y, length_x, length_y, obj_Parent_Wall, false, true)) {
    
        laser_shoot = false;
        //beginning = true;
    }
}

if (!place_meeting(x, y, obj_Rat_Body)) { //and (weapon_picked_up == false) and (equipped = false)) {

    equip_text_box = false; 
}

if (place_meeting(x, y, obj_Rat_Body) and (obj_Weapon_In_Use.weapon_picked_up == false) and (obj_Weapon_In_Use.equipped = false)) {

    draw_set_font(font_weapon);
    draw_set_color(font_color_weapon);    
    
    scr_draw_messagebox(text_weapon, popup_width_weapon, popup_padding_weapon, self, bak_color_weapon, draw_below_weapon);
    equip_text_box = true;
}


if ((global.weapon_attach_left_arm == true) or (global.weapon_attach_right_arm = true)) {
    
    draw_set_font(Game_Font);
    //draw_set_halign(fa_center);
    //draw_set_valign(fa_middle);
    
    if (obj_Rat_Body.weapon_equipped.ammo &gt;= 10) {
        draw_text_colour((view_xview[0] + 500), (view_yview[0] + 10), ( string(obj_Rat_Body.weapon_equipped.ammo) + "\" ), c_lime, c_lime, c_lime, c_lime, 1);
        draw_text_colour((view_xview[0] + 525), (view_yview[0] + 10), string(obj_Rat_Body.weapon_equipped.ammo_reserve), c_lime, c_lime, c_lime, c_lime, 1);
        }
        
    if (obj_Rat_Body.weapon_equipped.ammo &lt;= 9) {
        draw_text_colour((view_xview[0] + 505), (view_yview[0] + 10), ( string(obj_Rat_Body.weapon_equipped.ammo) + "\" ), c_lime, c_lime, c_lime, c_lime, 1);
        draw_text_colour((view_xview[0] + 525), (view_yview[0] + 10), string(obj_Rat_Body.weapon_equipped.ammo_reserve), c_lime, c_lime, c_lime, c_lime, 1);
        }
    
    if ((sprite_index == sprite_index_Right_Weapon_In_Use_Equipped) or (sprite_index == sprite_index_Left_Weapon_In_Use_Equipped)) {
        
        draw_sprite(sprite_index_Weapon_Hud, 0, (view_xview[0] + 515),(view_yview[0] + 35));
        draw_sprite(spr_Ammo_Bracket_Left, 0, (view_xview[0] + 515) - 35, (view_yview[0] + 27));
        draw_sprite(spr_Ammo_Bracket_Right, 0, (view_xview[0] + 515) + 35,(view_yview[0] + 27));

    }
}

if ((sprite_index == sprite_index_Left_Weapon_In_Use_Pick_Up) or (sprite_index == sprite_index_Right_Weapon_In_Use_Pick_Up)) {

    depth = y * -1;
    draw_sprite_ext(sprite_index, image_index, x, y + sprite_height, image_xscale, image_yscale, image_angle, c_black, 0.25);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>5,8</point>
    <point>7,7</point>
  </PhysicsShapePoints>
</object>
