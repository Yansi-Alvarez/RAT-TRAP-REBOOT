<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spawn = true;

randomize();

////////////////////////////////////////////////////////////////////////////////

for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
    
        if (ds_grid_get(obj_Director.grid_map, i, j) == 1) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), global.level_floor[global.wall_input]); 
        }
    }
}

////////////////////////////////////////////////////////////////////////////////
//Wall Lab Alone
for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
    
        if ((ds_grid_get(obj_Director.grid_map, i, j) == 0) 
        and (ds_grid_get(obj_Director.grid_map, i, (j + 1)) == 1) 
        and (ds_grid_get(obj_Director.grid_map, (i + 1), j) == 1) 
        and (ds_grid_get(obj_Director.grid_map, (i - 1), j) == 1) 
        and ((ds_grid_get(obj_Director.grid_map, i, (j - 1)) == 1) or (ds_grid_get(obj_Director.grid_map, i, (j - 1)) == 0))) {
        
            //instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), global.wall_alone[global.wall_input]); //idk, it was commented out
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed) + (global.level_maker_speed / 2), global.wall_alone[global.wall_input]);
            instance_create((i * global.level_maker_speed), ((j + 1) * global.level_maker_speed), obj_Wall_Shadow);
            ds_grid_set(obj_Director.grid_map, i, j, 2);
        }
    }
}

//Wall Lab Left-Right
for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
    
        if ((ds_grid_get(obj_Director.grid_map, i, j) == 0) 
        and ((ds_grid_get(obj_Director.grid_map, i, (j + 1)) == 1) or (ds_grid_get(obj_Director.grid_map, i, (j + 1)) == 0))
        and (ds_grid_get(obj_Director.grid_map, (i + 1), j) == 1) 
        and (ds_grid_get(obj_Director.grid_map, (i - 1), j) == 1)) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), global.wall_left_right[global.wall_input]);
            ds_grid_set(obj_Director.grid_map, i, j, 2);
        }
    }
}

//Wall Lab Down
for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
    
        if ((ds_grid_get(obj_Director.grid_map, i, j) == 0) 
        and (ds_grid_get(obj_Director.grid_map, i, (j + 1)) == 1) and (ds_grid_get(obj_Director.grid_map, (i + 1), j) == 0) and (ds_grid_get(obj_Director.grid_map, (i - 1), j) != 1)) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), global.wall_down[global.wall_input]);
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed) + (global.level_maker_speed / 2), obj_Wall_Shadow);
            instance_create((i * global.level_maker_speed), ((j + 1) * global.level_maker_speed), obj_Wall_Shadow);
            ds_grid_set(obj_Director.grid_map, i, j, 2);
        }
    }
}

//Wall Lab Right
for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
    
        if ((ds_grid_get(obj_Director.grid_map, i, j) == 0) 
        and (ds_grid_get(obj_Director.grid_map, i + 1, j) == 1) and (ds_grid_get(obj_Director.grid_map, i, (j + 1)) == 0) and (ds_grid_get(obj_Director.grid_map, i, (j - 1)) != 1)) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), global.wall_right[global.wall_input]);
            ds_grid_set(obj_Director.grid_map, i, j, 2);
        }
    }
}

//Wall Lab Left
for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
    
        if ((ds_grid_get(obj_Director.grid_map, i, j) == 0) 
        and (ds_grid_get(obj_Director.grid_map, (i - 1), j) == 1) and (ds_grid_get(obj_Director.grid_map, i, (j + 1)) == 0) and (ds_grid_get(obj_Director.grid_map, i, (j - 1)) != 1)) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), global.wall_left[global.wall_input]);
            ds_grid_set(obj_Director.grid_map, i, j, 2);
        }
    }
}

//Wall Lab Left
for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
    
        if ((ds_grid_get(obj_Director.grid_map, i, j) == 0) 
        and (ds_grid_get(obj_Director.grid_map, (i - 1), j) == 1) and (ds_grid_get(obj_Director.grid_map, i, (j + 1)) == 0) and (ds_grid_get(obj_Director.grid_map, i, (j - 1)) != 1)) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), global.wall_left[global.wall_input]);
            ds_grid_set(obj_Director.grid_map, i, j, 2);
        }
    }
}

//Wall Lab Left Turn
for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
    
        if ((ds_grid_get(obj_Director.grid_map, i, j) == 0) 
        and (ds_grid_get(obj_Director.grid_map, (i - 1), j) == 1) and (ds_grid_get(obj_Director.grid_map, i, (j + 1)) == 1)
        and ((ds_grid_get(obj_Director.grid_map, (i - 1), j) == 2) or (ds_grid_get(obj_Director.grid_map, (i - 1), j) == 1))) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), global.wall_turn_left[global.wall_input]);
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed) + (global.level_maker_speed / 2), obj_Wall_Shadow_Lab_Down_Left);
            instance_create((i * global.level_maker_speed), ((j + 1) * global.level_maker_speed), obj_Wall_Shadow);
            ds_grid_set(obj_Director.grid_map, i, j, 2);
        }
    }
}

//Wall Lab Right Turn
for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
    
        if ((ds_grid_get(obj_Director.grid_map, i, j) == 0) 
        and (ds_grid_get(obj_Director.grid_map, (i + 1), j) == 1) and (ds_grid_get(obj_Director.grid_map, i, (j + 1)) == 1)
        and ((ds_grid_get(obj_Director.grid_map, (i - 1), j) == 2) or (ds_grid_get(obj_Director.grid_map, (i - 1), j) == 1))) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), global.wall_turn_right[global.wall_input]);
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed) + (global.level_maker_speed / 2), obj_Wall_Shadow_Lab_Down_Right);
            instance_create((i * global.level_maker_speed), ((j + 1) * global.level_maker_speed), obj_Wall_Shadow);
            ds_grid_set(obj_Director.grid_map, i, j, 2);
        }
    }
}

//Wall Lab Right Intersection
for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
    
        if ((ds_grid_get(obj_Director.grid_map, i, j) == 0) 
        and (ds_grid_get(obj_Director.grid_map, (i + 1), j) == 2) and (ds_grid_get(obj_Director.grid_map, i, (j + 1)) == 2)
        and (ds_grid_get(obj_Director.grid_map, (i - 1), j) == 1)
        and (ds_grid_get(obj_Director.grid_map, (i + 1), (j + 1)) == 1)) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), global.wall_intersection_right[global.wall_input]);
            instance_create((i * global.level_maker_speed) + (global.level_maker_speed - (global.level_maker_speed/4)), (j * global.level_maker_speed) + (global.level_maker_speed/2), obj_Wall_Shadow_Lab_Up_Left);
            ds_grid_set(obj_Director.grid_map, i, j, 2);
        }
    }
}

//Wall Lab Right Up Corner
for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
    
        if ((ds_grid_get(obj_Director.grid_map, i, j) == 0) 
        and (ds_grid_get(obj_Director.grid_map, (i + 1), j) == 2) and (ds_grid_get(obj_Director.grid_map, i, (j + 1)) == 2)
        and (ds_grid_get(obj_Director.grid_map, (i + 1), (j + 1)) == 1)) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), global.wall_corner_right_up[global.wall_input]);
            instance_create((i * global.level_maker_speed) + (global.level_maker_speed - (global.level_maker_speed/4)), (j * global.level_maker_speed) + (global.level_maker_speed/2), obj_Wall_Shadow_Lab_Up_Left);
            ds_grid_set(obj_Director.grid_map, i, j, 2);
        }
    }
}

//Wall Lab Left Intersection
for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
    
        if ((ds_grid_get(obj_Director.grid_map, i, j) == 0) 
        and (ds_grid_get(obj_Director.grid_map, (i - 1), j) == 2) and (ds_grid_get(obj_Director.grid_map, i, (j + 1)) == 2)
        and (ds_grid_get(obj_Director.grid_map, (i + 1), j) == 1)
        and (ds_grid_get(obj_Director.grid_map, (i - 1), (j + 1)) == 1)) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), global.wall_intersection_left[global.wall_input]);
            instance_create((i * global.level_maker_speed) - (global.level_maker_speed - (global.level_maker_speed/4)), (j * global.level_maker_speed) + (global.level_maker_speed/2), obj_Wall_Shadow_Lab_Up_Right);
            ds_grid_set(obj_Director.grid_map, i, j, 2);
        }
    }
}

//Wall Lab Left Up Corner
for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
    
        if ((ds_grid_get(obj_Director.grid_map, i, j) == 0) 
        and (ds_grid_get(obj_Director.grid_map, (i - 1), j) == 2) and (ds_grid_get(obj_Director.grid_map, i, (j + 1)) == 2)
        and (ds_grid_get(obj_Director.grid_map, (i - 1), (j + 1)) == 1)) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), global.wall_corner_left_up[global.wall_input]);
            instance_create((i * global.level_maker_speed) - (global.level_maker_speed - (global.level_maker_speed/4)), (j * global.level_maker_speed) + (global.level_maker_speed/2), obj_Wall_Shadow_Lab_Up_Right);
            ds_grid_set(obj_Director.grid_map, i, j, 2);
        }
    }
}

//Wall Lab Right
for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
    
        if ((ds_grid_get(obj_Director.grid_map, i, j) == 0) 
        and (ds_grid_get(obj_Director.grid_map, i + 1, j) == 1)) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), global.wall_right[global.wall_input]);
            ds_grid_set(obj_Director.grid_map, i, j, 2);
        }
    }
}

//Wall Lab Left
for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
    
        if ((ds_grid_get(obj_Director.grid_map, i, j) == 0) 
        and (ds_grid_get(obj_Director.grid_map, (i - 1), j) == 1)) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), global.wall_left[global.wall_input]);
            ds_grid_set(obj_Director.grid_map, i, j, 2);
        }
    }
}

//Wall Lab Full for the rest of the free nodes
for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
    
        //Generate blank walls for the outside
        if ((ds_grid_get(obj_Director.grid_map, i, j) == 0)) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), global.wall_full[global.wall_input]); 
            ds_grid_set(obj_Director.grid_map, i, j, 2);
        } 
    }
}
    
////////////////////////////////////////////////////////////////
/*
//Prop Generation
for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
    
        randomize();
        prop_spawn_chance = irandom(2000); 
        
        if ((ds_grid_get(obj_Director.grid_map, i, j) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i, (j + 1)) == 1)
        and (ds_grid_get(obj_Director.grid_map, (i + 1), j) == 1)
        and (ds_grid_get(obj_Director.grid_map, (i - 1), j) == 0)) and (prop_spawn_chance &lt;= 100){
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), obj_Shelves);
        }
        
        if ((ds_grid_get(obj_Director.grid_map, i, j) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i, (j + 1)) == 1)
        and (ds_grid_get(obj_Director.grid_map, (i - 1), j) == 1)
        and (ds_grid_get(obj_Director.grid_map, (i + 1), j) == 0)) and (prop_spawn_chance &lt;= 100){
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), obj_Shelves);
        }
    }
}
*/
////////////////////////////////////////////////////////////////

//Player Generation
for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
    
        if ((ds_grid_get(obj_Director.grid_map, i, j) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i, j + 1) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i, j + 2) == 1)
        and (ds_grid_get(obj_Director.grid_map, i, j + 3) == 1)
        and (ds_grid_get(obj_Director.grid_map, i, j + 4) == 1)
        and (ds_grid_get(obj_Director.grid_map, i, j + 5) == 1)
        
        and (ds_grid_get(obj_Director.grid_map, i + 1, j) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 1, j + 1) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 1, j + 2) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 1, j + 3) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 1, j + 4) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 1, j + 5) == 1) 
        
        and (ds_grid_get(obj_Director.grid_map, i + 2, j) == 1)
        and (ds_grid_get(obj_Director.grid_map, i + 2, j + 1) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 2, j + 2) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 2, j + 3) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 2, j + 4) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 2, j + 5) == 1) 
        
        and (ds_grid_get(obj_Director.grid_map, i + 3, j) == 1)
        and (ds_grid_get(obj_Director.grid_map, i + 3, j + 1) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 3, j + 2) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 3, j + 3) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 3, j + 4) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 3, j + 5) == 1) 
        
        and (ds_grid_get(obj_Director.grid_map, i + 4, j) == 1)
        and (ds_grid_get(obj_Director.grid_map, i + 4, j + 1) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 4, j + 2) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 4, j + 3) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 4, j + 4) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 4, j + 5) == 1) 
        
        and (ds_grid_get(obj_Director.grid_map, i + 5, j) == 1)
        and (ds_grid_get(obj_Director.grid_map, i + 5, j + 1) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 5, j + 2) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 5, j + 3) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 5, j + 4) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 5, j + 5) == 1)) 
        
        and (spawn == true) {
        
            instance_create(((i + 1) * global.level_maker_speed), (j * global.level_maker_speed), obj_Rat_Head);
            
            for (m = 0; m &lt; 5; m++) {
            
                for (n = 0; n &lt; 5; n++) {
                
                    ds_grid_set(obj_Director.grid_map, (i + m), (j + n), 10);
                }
            }
            
            spawn = false;
        }
    }
}

// Normal Mode:

//Defeat all the enemies in the level

//if ( global.mission_input == 1 )
//{
    /*
    //Enemy Generation
    for (i = 0; i &lt; obj_Director.grid_width; i += 1) {
    
        for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
            
            //randomize();
            enemy_spawn_chance = irandom(1000); 
            
            if (ds_grid_get(obj_Director.grid_map, i, j) == 1) {
                
                if (enemy_spawn_chance &lt;= 50) {
            
                    instance_create((i * global.level_maker_speed) + 32, (j * global.level_maker_speed) - 32, obj_Lightning_Bug);
                }
            }
        }
    }*/
//}

// Cardkey Mode:

//Find the cardkey and place it in the machine
/*
else if ( global.mission_input == 2 )
{
    for (i = 0; i &lt; obj_Director.grid_width; i += 1) {
    
        for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
        
        }
    }
           
}

// Survival Mode (Timed):

//Find the cardkey and place it in the machine

else if ( global.mission_input == 3 )
{

}
*/
/*
//Enemy Generation
for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
        
        //randomize();
        enemy_spawn_chance = irandom(1000); 
        
        if (ds_grid_get(obj_Director.grid_map, i, j) == 1) {
            
            if (enemy_spawn_chance &lt;= 50) {
        
                instance_create((i * global.level_maker_speed) + 32, (j * global.level_maker_speed) - 32, obj_Lightning_Bug);
            }
        }
    }
}*/

instance_create( 0, 0, obj_Clock);
//instance_create( 0, 0, obj_Fade);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
