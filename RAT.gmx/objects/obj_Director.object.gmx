<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>terminal = true;

//Creating a new level every time the game starts up
randomize();

//Size of the grid used to generate the objects, it is 64 since
//the wall and floor are of that size
//**40 by 30 size grid**

grid_size = 64;

//Variable to store the size of the rooms
room_size = noone;

//Variable to store the room generation chance 
room_generation_chance = noone;

//The center of the room through its width, has to be divisible by 64
global.center_room_width = room_width/2

//The center of the room through its height, has to be divisible by 64
global.center_room_height = room_height/2

//The width and height have to be divisble by 64 so the level maker can be aligned
//with the room and place everything aligned to each other

//Activation for the enemy AI
global.enemy_activation = false;

//Speed of the level maker, has to be same as grid width (64 for now) 
//so it can the objects can be aligned
global.level_maker_speed = 64;

global.create_central_room = false;

global.create_boundary = false;

global.first_level_maker_creation = false;

////////////////////////////////////////////////////////////////////////////////

global.wall_right[0] = obj_Wall_Lab_Right;
global.wall_down[0] = obj_Wall_Lab_Down;
global.wall_left[0] = obj_Wall_Lab_Left;
global.wall_left_right[0] = obj_Wall_Lab_Left_Right;
global.wall_corner_right_up[0] = obj_Wall_Lab_Corner_Right_Up;
global.wall_corner_left_up[0] = obj_Wall_Lab_Corner_Left_Up;
global.wall_intersection_right[0] = obj_Wall_Lab_Intersection_Right;
global.wall_intersection_left[0] = obj_Wall_Lab_Intersection_Left;
global.wall_full[0] = obj_Wall_Lab_Full;
global.wall_alone[0] = obj_Wall_Lab_Alone;
global.wall_turn_left[0] = obj_Wall_Lab_Turn_Left;
global.wall_turn_right[0] = obj_Wall_Lab_Turn_Right;

global.wall_right[1] = obj_Wall_Server_Right;
global.wall_down[1] = obj_Wall_Server_Down;
global.wall_left[1] = obj_Wall_Server_Left;
global.wall_left_right[1] = obj_Wall_Server_Left_Right;
global.wall_corner_right_up[1] = obj_Wall_Server_Corner_Right_Up;
global.wall_corner_left_up[1] = obj_Wall_Server_Corner_Left_Up;
global.wall_intersection_right[1] = obj_Wall_Server_Intersection_Right;
global.wall_intersection_left[1] = obj_Wall_Server_Intersection_Left;
global.wall_full[1] = obj_Wall_Server_Full;
global.wall_alone[1] = obj_Wall_Server_Alone;
global.wall_turn_left[1] = obj_Wall_Server_Turn_Left;
global.wall_turn_right[1] = obj_Wall_Server_Turn_Right;

global.wall_right[2] = obj_Wall_Desert_Right;
global.wall_down[2] = obj_Wall_Desert_Down;
global.wall_left[2] = obj_Wall_Desert_Left;
global.wall_left_right[2] = obj_Wall_Desert_Left_Right;
global.wall_corner_right_up[2] = obj_Wall_Desert_Corner_Right_Up;
global.wall_corner_left_up[2] = obj_Wall_Desert_Corner_Left_Up;
global.wall_intersection_right[2] = obj_Wall_Desert_Intersection_Right;
global.wall_intersection_left[2] = obj_Wall_Desert_Intersection_Left;
global.wall_full[2] = obj_Wall_Desert_Full;
global.wall_alone[2] = obj_Wall_Desert_Alone;
global.wall_turn_left[2] = obj_Wall_Desert_Turn_Left;
global.wall_turn_right[2] = obj_Wall_Desert_Turn_Right;

global.wall_right[3] = obj_Wall_Cliff_Right;
global.wall_down[3] = obj_Wall_Cliff_Down;
global.wall_left[3] = obj_Wall_Cliff_Left;
global.wall_left_right[3] = obj_Wall_Cliff_Left_Right;
global.wall_corner_right_up[3] = obj_Wall_Cliff_Corner_Right_Up;
global.wall_corner_left_up[3] = obj_Wall_Cliff_Corner_Left_Up;
global.wall_intersection_right[3] = obj_Wall_Cliff_Intersection_Right;
global.wall_intersection_left[3] = obj_Wall_Cliff_Intersection_Left;
global.wall_full[3] = obj_Wall_Cliff_Full;
global.wall_alone[3] = obj_Wall_Cliff_Alone;
global.wall_turn_left[3] = obj_Wall_Cliff_Turn_Left;
global.wall_turn_right[3] = obj_Wall_Cliff_Turn_Right;

global.level_floor[0] = obj_Concrete_Floor;
global.level_floor[1] = obj_Steel;
global.level_floor[2] = obj_Sand;
global.level_floor[3] = choose(obj_Grass, obj_Grass_Alt, obj_Grass_Alt_2);

////////////////////////////////////////////////////////////////////////////////

grid_width = (room_width/global.level_maker_speed) + 1; //(2560/64) + 1 = 41
grid_height = (room_height/global.level_maker_speed) + 1; //(1920/64) 1 = 31

grid_width_index = ((room_width/global.level_maker_speed));  //(2560/64) = 40
grid_height_index = ((room_height/global.level_maker_speed)); //(1920/64) = 30

grid_map = ds_grid_create(grid_width, grid_height) //40 by 30
id_value = noone;

//Assign every cell in the grid to noone
for (i = 0; i &lt; grid_width; i++) {

    for (j = 0; j &lt; grid_height; j++) {
        
        //Assigning all the cells a value of zero
        ds_grid_set(grid_map, i, j, 0);
    }
}

//Room generation
for (i = 0; i &lt; grid_width_index; i++) {

    for (j = 0; j &lt; grid_height_index; j++) {
        
        if ((i &gt; 0) and (i &lt; grid_width_index)) 
        and ((j &gt; 0) and (j &lt; grid_height_index)) {
            
            randomize();
            room_size = choose(2, 3, 4, 5, 6);
            room_generation_chance = irandom(50);
                
            if (room_generation_chance &lt;= 10) {
                
                var buildable = true;
                
                for (m = (i - 1); m &lt;= (i + room_size); m++) {
                    
                    for (n = (j - 1); n &lt;= (j + room_size); n++) {
                    
                        if (ds_grid_get(grid_map, m, n) != 0) {
                            
                            buildable = false;
                        }
                    }
                }
                
                if (buildable) and ((i + room_size) &lt; grid_width_index) and ((j + room_size) &lt; grid_height_index){
                    
                    ds_grid_set_region(grid_map, i, j, (i + (room_size - 1)), (j + (room_size - 1)), 1);
                }
            }
        }
    }
}

//Hallway to right generation
for (i = 0; i &lt; grid_width_index; i++) {

    for (j = 0; j &lt; grid_height_index; j++) {
        
        var build_pathway = true;
        var dead_end = false;
        
        if (ds_grid_get(grid_map, i, j) == 1) 
        and (ds_grid_get(grid_map, i + 1, j) == 0) 
        and (ds_grid_get(grid_map, (i + 1), (j + 1)) == 0) 
        and (ds_grid_get(grid_map, (i + 1), (j - 1)) == 0)
        and ((i + 1) &lt; (grid_width_index - 1)) 
        and ((j + 1) &lt; (grid_height_index - 1)) 
        and (build_pathway == true) { 
        
            ds_grid_add(grid_map, (i + 1), j, 1); 
            
            if (ds_grid_get(grid_map, i, j) == 2) { 
                
                build_pathway = false;
                ds_grid_set(grid_map, i, j, 1); 
            }
        }
        
        if (ds_grid_get(grid_map, i, j) == 1) 
        and (ds_grid_get(grid_map, i + 1, j) == 0) 
        and ((ds_grid_get(grid_map, (i + 1), (j + 1)) != 0) or (ds_grid_get(grid_map, (i + 1), (j - 1)) != 0)
        or (ds_grid_get(grid_map, (i - 1), (j + 1)) != 0) or (ds_grid_get(grid_map, (i - 1), (j - 1)) != 0))
        and ((ds_grid_get(grid_map, (i - 1), (j - 1)) == 0) or (ds_grid_get(grid_map, (i - 1), (j + 1)) == 0))
        and ((i + 1) &lt; (grid_width_index - 1)) 
        and ((j + 1) &lt; (grid_height_index - 1)) {
        
            dead_end = true;
        }
        
        if (dead_end == true) {
            
            ds_grid_set(grid_map, (i + 1), j, 1);
            dead_end = false;
        }
    }
}
/*
//Hallway down generation
for (i = 0; i &lt; grid_width_index; i++) {

    for (j = 0; j &lt; grid_height_index; j++) {
        
        var build_pathway = true;
        var dead_end = false;
    
        if (ds_grid_get(grid_map, i, j) == 1) 
        and (ds_grid_get(grid_map, i, (j + 1)) == 0) 
        and (ds_grid_get(grid_map, (i + 1), (j + 1)) == 0) 
        and (ds_grid_get(grid_map, (i - 1), (j + 1)) == 0)
        and ((i + 1) &lt; (grid_width_index - 1)) 
        and ((j + 1) &lt; (grid_height_index - 1)) 
        and (build_pathway == true) { 
        
            ds_grid_add(grid_map, i, (j + 1), 1); 
            
            if (ds_grid_get(grid_map, i, j) == 2) { 
                
                build_pathway = false;
                ds_grid_set(grid_map, i, j, 1); 
            }
        }
        
        
        if (ds_grid_get(grid_map, i, j) == 1) 
        and (ds_grid_get(grid_map, i, (j + 1)) == 0) 
        and ((ds_grid_get(grid_map, (i - 1), j) != 0) or (ds_grid_get(grid_map, (i + 1), j) != 0)
        or (ds_grid_get(grid_map, i, (j + 1)) != 0) or (ds_grid_get(grid_map, i, (j - 1)) != 0))
        and ((ds_grid_get(grid_map, (i - 1), (j - 1)) == 0) or (ds_grid_get(grid_map, (i - 1), (j + 1)) == 0))
        and ((i + 1) &lt; (grid_width_index - 1)) 
        and ((j + 1) &lt; (grid_height_index - 1)) {
        
            dead_end = true;
        }
        
        if (dead_end == true) {
            
            ds_grid_set(grid_map, i, (j + 1), 1);
            dead_end = false;
        }
    }
}
*/
//Deleting dead ends
for (i = (grid_width_index); (i &gt;= 0); i--) {

    for (j = (grid_height_index); (j &gt;= 0); j--) {
    
        if ((ds_grid_get(grid_map, i, j)) == 1) 
        and ((ds_grid_get(grid_map, (i + 1), j)) == 0)
        and ((ds_grid_get(grid_map, i, (j + 1))) == 0)
        and ((ds_grid_get(grid_map, i, (j - 1))) == 0) {
        
            ds_grid_set(grid_map, i, j, 0);
        }
        
        if ((ds_grid_get(grid_map, i, j)) == 1) 
        and ((ds_grid_get(grid_map, i, (j + 1))) == 0)
        and ((ds_grid_get(grid_map, (i + 1), j)) == 0)
        and ((ds_grid_get(grid_map, (i - 1), j)) == 0) {
        
            ds_grid_set(grid_map, i, j, 0);
        }
    }
}

////////////////////////////////////////////////////////////////////////////////

instance_create(global.center_room_width, global.center_room_height, obj_Level_Maker);

////////////////////////////////////////////////////////////////////////////////
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if !instance_exists(obj_Parent_Enemy) and (terminal == true) {
    
    instance_create(obj_Rat_Legs.x, obj_Rat_Legs.y, obj_Terminal);
    terminal = false;
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
